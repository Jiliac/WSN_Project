author: Valentin Manes, valentinmanes@outlook.fr

Project done at KAIST, CS546: Wireless Mobile Internet
Spring 2016.
Trying to improve an Adaptive Sampling technique

Step 0 is to install TinyOS.

First, I have modify some files in the TinyOS library.
There is a copy of every modified file in the lib_modified_files folder.
Their original place is indicated in the comments
You'll want to place at the right place before compiling.

Before running anything, you will want to compile the three solution.
Enter Basic_Sensing, REP or dynREP folder:
1. make sure the PFLAGS and TINYOS_ROOT_DIR 
entries of the Makefile point to the right place
2. enter the command: make micaz sim
Compile to be run as a simulation of the MICAz platform.

SensingC.nc, SensingAppC.nc and Sensing.h are the files that defines a solution.
Apart from running, all the python scripts are used for the evaluation.
running.py is used to run a simulation.

The two script made for use are running.py and analysis.py.
In both case all parameters are optional and have default values.
1. running.py, example:
./running.py numOfNodes=5 duration=300 loading=rep topoFile=topo.txt
-> numOfNodes should be an integer. Represent the number of nodes
    in the simulation. This number should be consistent with the topology file
-> duration is how long the simulation is runned (in seconds)
-> loading indicate which solution is runned. It can have three values:
    basic: Just normal constant sensing. Simple Sensing app. Just for comparison
    rep: Serenity re-implementation, Lee et al. solution
    dyn: Serenity improvement. Implementation of my idea
-> topoFile indicate the location of the topology file.
    This file set the links between nodes. See topo.txt for an example.
    Otherwise, you shouldn't worry about this file. It is automatically 
    generated by analysis.py script and placed at the default location.

2. analysis.py, example:
./analysis numOfNodes=5 duration=300 widex=150 widey=150 plotSpectrum=False plotSignal=True
-> numOfNodes meaning is same as above. Except it will also be used
    to generate the topology file.
-> duration meaning is same as above.
-> widex and widey should be integer. They represent the length and wideness of
    the field where nodes are (in meters)
-> plotSpectrum: boolean to say if the script should plot
    the spectrum of the signal of every node
-> plotSignal: boolean. Similar as above but to plot the signal and the filtered signal.
    Should be turned off for automation
    because it stops the script until the user close the window.
This script will generate a final_report.txt . It can be read or displayed by
./create_histo.py
